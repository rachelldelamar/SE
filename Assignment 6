import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;
import collatz.CollatzCalculatorGrpc;
import collatz.CollatzRequest;
import collatz.CollatzResponse;

public class CollatzCalculatorServer {
    private final int port;
    private final Server server;

    public CollatzCalculatorServer(int port) {
        this.port = port;
        this.server = ServerBuilder.forPort(port)
                .addService(new CollatzCalculatorImpl())
                .build();
    }

    public void start() throws Exception {
        server.start();
        System.out.println("Server started, listening on " + port);
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            System.err.println("*** shutting down gRPC server since JVM is shutting down");
            CollatzCalculatorServer.this.stop();
            System.err.println("*** server shut down");
        }));
    }

    public void stop() {
        if (server != null) {
            server.shutdown();
        }
    }

    private static class CollatzCalculatorImpl extends CollatzCalculatorGrpc.CollatzCalculatorImplBase {
        @Override
        public void calculateCollatzSequence(CollatzRequest request, StreamObserver<CollatzResponse> responseObserver) {
            CollatzResponse.Builder responseBuilder = CollatzResponse.newBuilder();
            for (int number : request.getNumbers()) {
                String sequence = calculateCollatzSequence(number);
                responseBuilder.addSequences(sequence);
            }
            responseObserver.onNext(responseBuilder.build());
            responseObserver.onCompleted();
        }

        private String calculateCollatzSequence(int n) {
            StringBuilder sequence = new StringBuilder();
            sequence.append(n);
            while (n != 1) {
                if (n % 2 == 0) {
                    n /= 2;
                } else {
                    n = 3 * n + 1;
                }
                sequence.append(",").append(n);
            }
            return sequence.toString();
        }
    }

    public static void main(String[] args) throws Exception {
        int port = 50051;
        CollatzCalculatorServer server = new CollatzCalculatorServer(port);
        server.start();
        server.server.awaitTermination();
    }
}
